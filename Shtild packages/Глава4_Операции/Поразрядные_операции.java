package Глава4_Операции;

public class Поразрядные_операции {
// Операция  Описание
//      ~    Поразрядная унарная операция НЕ
//      &    Поразрядная логическия операция
//      |    Порязрядная логическая ИЛИ
//      ^    Поразрядная логическия операция исключающее ИЛИ
//      >>   Сдвиг вправо
//      >>>  Сдвиг вправо с заполнением нулями
//      <<   Сдвиг влево
//      &=   Поразрядная логическая операция И с прсваиванием
//      |=   Поразрядная логическая операция ИЛИ с присваиванием
//      ^=   Поразрядная логическая операция исключающее ИЛИ с присваиванием
//      >>=  Сдвиг вправо с присваиванием
//      >>>= Сдвиг врабо с заполненными нулями и присваиванием
//      =<<  Сдвиг влево с присваиванием
}

class BitLogic {
    public static void main(String[] args) {
        String binary[] = {

                "0000","0001","0010","0011","0100","0101",
                "0110","0111","1000","1001","1010","1011",
                "1100","1101","1110","1111"
        };
        byte b1 = 0B0000;   byte b7 = 0B0110;  byte b13 = 0B1100;
        byte b2 = 0B0001;   byte b8 = 0B0111;  byte b14 = 0B1101;
        byte b3 = 0B0010;   byte b9 = 0B1000;  byte b15 = 0B1110;
        byte b4 = 0B0011;   byte b10 = 0B1001; byte b16 = 0B1111;
        byte b5 = 0B0100;   byte b11 = 0B1010;
        byte b6 = 0B0101;   byte b12 = 0B1011;
        int a = 1;
        int b = 6;
        int c = a | b;
        int d = a & b;
        int e = a ^ b;
        int f = (~ a & b ) | ( a & ~b );
        int g = ~a & 0x0f;
        System.out.println(" a = " + binary[a] + " " + a);
        System.out.println(" b = " + binary[b] + " " + b);
        System.out.println(" a | b = " + binary[c] + " " + c);
        System.out.println(" a & b = " + binary[d] + " " + d);
        System.out.println(" a ^ b = " + binary[e] + " " + e);
        System.out.println(" ~ a & b | a & b = " + binary[f] + " " + f);
        System.out.println(" ~ a = " + binary[g] + " " + g + "\n" +
        "Вывод в десятиричной системе чисел массива String binary[] через примитивные " +
        "типы данных byte b1 ... byte b17 " + "\n" +
        b1 + " " + b2 + " " + b3 +  " " + b4  + " " + b5 + " "  + b6 +  " " + b7 + " " +
        b8 + " " + b9 + " " + b10 + " " + b11 + " " + b12 + " " + b13 + " " + b14 + " " +
        + + + + + + + + + + + b15 + " " + b16);
        //Здесь в командной строке можно писать сколько угодно раздельных знаков + разделеных пробелом
    }
}
//Пример из серии видео UDEMY Java для начинающих с нуля до сертификата Oracle
//В качестве примера обращается внимание на преобразование чисел разнх систем исчесления
//в вывод консоли в десятиричной системе исчисления
class Lesson_2{
    public static void main(String[] args) {
        //Двоичная
        byte b1 = 0B1100;              System.out.println(b1);
        //Восьмиричная
        byte b2 = 014;                 System.out.println(b2);
        //Десятиричная
        byte b3 = 12;                  System.out.println(b3);
        //Шестнадцатиричная
        byte b4 = 0xC;                 System.out.println(b4);

        short s1 = -0b10100010100;     System.out.println(s1);
        short s2 = -02424;             System.out.println(s2);
        short s3 = -1300;              System.out.println(s3);
        short s4 = -0x514;             System.out.println(s4);

        int i1 = 0b0;                  System.out.println(i1);
        int i2 = 00;                   System.out.println(i1);
        int i3 = 0;                    System.out.println(i1);
        int i4 = 0x0;                  System.out.println(i1);

        long l1 = 0b111010110111100110100010101L;
        System.out.println(l1);
        long l2 = 0726746425L;         System.out.println(l2);
        long l3 = 123456789L;          System.out.println(l3);
        long l4 = 0x75BC15L;           System.out.println(l4);

        float f1 = 3.14F;              System.out.println(f1);
        float f2 = 2.7172F;            System.out.println(f2);

        double d1 = 0.123D;            System.out.println(d1);
        double d2 = 9.9765D;           System.out.println(d2);

        boolean boolean1 = false;      System.out.println(boolean1);
        boolean boolean2 = true;       System.out.println(boolean2);

        char c1 = 'z';                 System.out.println(c1);
        char c2 = '\u0555';            System.out.println(c2);
        char c3 = 777;                 System.out.println(c3);
    //В java после записи числовой переменной ставятся буквы
    //" L , l " — long
    //" F , f " — float
    //" D , d " — double
    //"_" — символ underscore можно использовать для упрощения кода
    //Underscore нельзя ставить
    // 1)Вначали и вконце числа
    // 2)До и после точки
    // 3)До и после букв L,l,F,f,D,d
    // 4)До и после между 0X,0x,0B,0b Символ char обозначает знак в
    // Unicode от 0 до 65535 символов если char присвоен к числу
    // то число является порядковым номерм в Unicode
    }
}

class Lesson_3 {
    public static void main(String[] args) {
        int i1 = 5;
        int i2 = 11;
        double d1 = 5.5;
        double d2 = 1.3;
        long l = 20l;
        double result = 0;
        result = i2/d1 + d2 % i1 - l;

        System.out.println(result);
        int a = 5;
        System.out.println(a-- - --a+ ++a + a++ +a);
        int b = 8;
        System.out.println(++b -b++ + ++b - --b);
        //При выполнении арифметических операций операции присваивоения такие как " ++ " , " -- " , " ** " , " %% " имеют расстановку
        //перед символом (типом данных) присвоения до и после например + ++b "++" стоит перед типом данных b, значит
        //сначала присваивается значение ++b а затем проводится арифметическая операция с переменной b. Если +b++
        //то результат сложения было не число присвоения а число b до присаоения, то есть b+
        //после выполнения арифметического выражения число b присвоено значение 1, то есть b++ = "b + 1"
    }
}





// Сдвиг влево значения типа byte
class ByteShift{
    public static void main(String[] args) {
        byte a = 64, b;
        int i;
        i = a << 2;
        b = (byte)(a << 2);
        System.out.println("Первоначальное значение a: " + a);
        System.out.println(" i and b: " + i + " " + b);
    }
}


//Применение сдвига вправо в качестве
//быстрого способа умножения на 2
class MultiByTwo{
    public static void main(String[] args) {
        int i;
        int num = 0xFFF_FFF_E;
        for(i = 0 ; i < 4 ; i++){
            num = num <<1;
            System.out.println(num);
        }
    }
}

//Беззнаковый сдвиг двоичных разрядов значения типа byte
class ByteUSift {
    public static void main(String[] args) {
        char hex[] = {
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b',
                'c', 'd', 'e', 'f'
        };
        byte b = (byte) 0xf1;
        byte c = (byte) (b >> 4);
        byte d = (byte) (b >>> 4);
        byte e = (byte) ((b & 0xff) >> 4);

        System.out.println("b = 0x_"   +  hex[(b >> 4) & 0x0f] + hex[b & 0x0f]);
        System.out.println("b >> 0x_"  +  hex[(c >> 4) & 0x0f] + hex[c & 0x0f]);
        System.out.println("b >>> 0x_" +  hex[(d >> 4) & 0x0f] + hex[d & 0x0f]);
        System.out.println("b & 0x_"   +  hex[(e >> 4) & 0x0f] + hex[e & 0x0f]);
    }
}

//Эта программа создает несколько целочисленных переменных, а затем использует
//составные операторы с присваением для манипулирования этими переменными
class OpBitEquals{
    public static void main(String[] args) {
        int a = 2;
        int b = 2;
        int c = 3;
        a |= 6;
        b >>= 1;
        c <<= 1;
        a ^= c;

        System.out.println("a = " + a);
        System.out.println("b = " + b);
        System.out.println("c = " + c);
    }
}


class Поразрядные_операции_info3 {

    //Операции отношения Java

// Операция     Описание
//       ==     Равно
//       !=     Не равно
//       >      Больше
//       <      Меньше
//       >=     Больше или равно
//       <=     Меньше или равно


    //Логические операции в Java

//    Описываемые в этом списке логические операции выполняются только
//    с операндами типа boolean Все логические операции с двумя операндами соединяют
//    два логических значения, образуя результирующее логическое значение. Все длступные
//    в Java логические оперции перечислены в таблице 4.5

// Операция     Описание
//        &     Логическая операция И
//        |     Логическая операция ИЛИ
//        ^     Логическая операция исключающее ИЛИ
//        ||    Укороченная логическая операция ИЛИ
//        &&    Укороченная логическая операция И
//        !     Логическая операция НЕ
//        &=    Логическая операция И с присваиванием
//        |=    Логическая операция ИЛИ с присваиванием
//        ^=    Логическая операция исключающее ИЛИ с присваиванием
//        ==    Равенство
//        !=    Неравенство
//        ?:    Тернарная условная операция типа если, то, иначе

//    Тернарная операция ?

// В синтаксисе Java имеется тернарная операция которая обозначается знаком ?
// и которой можно заменить определенные типы условных операторов вроде если, то, иначе
// Эта операция имеет следующую форму

// выражение1  ?  выражение2  :  выражение 3

// здесь выражениие1 обозначает любое выражение, вычисление которого дает логическое значение типа boolean
// Если это логическое значение true, то вычисляется выражение2, в случае логического значения false вычисляется
// выражение3 результат выполнения тернарной операции ? равен значению вычисленного выражения
// Из обеих частей выражение2 вырадение3 тернарной операции ? должно возвращаться значение
// одинакового типа return type, которым не может быть тип void
}

//Продемонстрировать применение тернарной операции ?
class Ternary{
    public static void main(String[] args) {
        int i,k;

        i = 10;
        k = i < 0 ? -i : i;// Получить абсолютное значение переменной i
        System.out.print("Абсолютное значение ");
        System.out.println(i + " равно " + k);
        i = -10;

        k = i < 0 ? -i : i;// Получить абсолютное значение переменной i
        System.out.print("Абсолютное значение ");
        System.out.println(i + " равно " + k);
    }
}

