package Глава6_Введение_в_классы;

import java.util.Random;


public class Классы {
}

// В этом классе определяется целочисленный стек, где
//можно хранить до 10 целочисленных значений

class Stack{
    int Array[]= new int[13];
    int tos;
    // инициализировать вершину стека


    //Примечание
    //В данном примере не очень разборчиво приведен пример со стеком в примере с тарелками которые лежат на столе
    //сначала мы должны одну тарелку поставить первой а после когда на нее поставим другие тарелки то извлечь последней
    //в данном классе для разборки этой интерпритации приведены два метода один должен размещать тарелки в данном случае
    //числа причем числа должны размещаться с большего по меньший до конца номера этой тарелки то есть числа
    //а другой метод должен при его вызове консоль выводить все эти числа
    //для вывода пишется через цикл где в цикле количество итераций должна быть меньше или равна брекпоинту
    //массива заданного в классе Stack число tos это высота массива заданное числом tos которое также должно быть
    //также меньше или равна брекпоинту массива
    //
    Stack(){
        tos = 1;
    }
    //разместить элемент в стеке
    void push(int item){
        if (tos == 120)
            System.out.println("Стек заполнен");
        else
            //Здесь почему что инкремент стоит обязательно перед tos который инициализирует порядковый номер массива
            //в этом случае означает что каждой итерацией присваевается число новому порядковому номеру массива
            Array[++tos] = item;
    }
    //После окончания выполнения итерации над методом push в массиве Stack загружено последнее значение этого
    //массива которое равно последнему значению цикла
    //извлечь элемент из стека, в этом примере дожно выводится в консоль
    int pop(){
        if (tos < 0){
            System.out.println("Стек не загружен");
            return 0;
        }
        else return Array[tos--];
    }
    //В методе pop перебирается массив в обратном направлении начиная с последнего обработанного числа массива в методе push
}

class LoadStack{
    public static void main(String[] args) {
        Stack mystack1 = new Stack();
        Stack mystack2 = new Stack();
        //Разместить числа в стеке
        for(int i = 11; i > 0; i-- )mystack1.push(i);
//        for (int i = 0; i < 10; i++) mystack1.push(i);
        for (int i = 10; i < 20; i++) mystack2.push(i);
        //Выводится в память массив чисел
        // 0 ; 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; 9
        // 10 ; 11 ; 12 ; 13 ; 14 ; 15 ; 16 ; 17 ; 18 ; 19
        //Выводятся в строку в содержимое цикла

        //Извлечь эти числа из стека
        System.out.println("Содержимое стека mystack1:");
        //этот цикл производит только 10 итераций с командной строкой
        // for(int i = 11; i > 0; i-- )
         for(int i = 0; i < 10; i++ )
            System.out.print(mystack1.pop() + " ");
        System.out.println("\n Содержимое стека mystack2:");
        for(int i = 0; i < 10; i++ )
            System.out.print(mystack2.pop() + " ");
            System.out.println("\n");

//        for (int i = 10; i < 20; i++) {
//            System.out.println("Число:" + i);
//        }
//            System.out.println("Не включая 20");

    }

}


class CounterArray {
    public static void main(String[] args){
        Random Ran = new Random();
        int freq[] = new int [7];

        for(int roll=1;roll<100;roll++){
            ++freq[1+Ran.nextInt(6)];
        }
        System.out.println("face\tFrequency");
        for(int face=1;face<freq.length;face++){
            System.out.println(face+"\t"+freq[face]);
        }
    }
}


















